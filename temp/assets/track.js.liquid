class Tracker {
  constructor(options = {}) {
    this.TRacerData = {
      userId: null,
      website: window.location.hostname,
      page_url: window.location.href,
      page_title: document.title,
      device_type: this.getDeviceType(),
      client_os: navigator.userAgentData.platform,
      create_time: new Date().toLocaleString(),
      element_name: null,
      // element_id: null,
      burying_point_id: null,
      remark: null,
      ...options,
    }
  }

  getDeviceType() {
    const userAgent = navigator.userAgent
    if (/Mobi|Android|iPhone/i.test(userAgent))
      return 'Mobile'
    if (/Tablet|iPad/i.test(userAgent))
      return 'Tablet'
    return 'PC'
  }

  async emit() {
   await fetch('https://api.hi-pev.com/shopify-seo/api/save/point', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(this.TRacerData),
    })
      .then((response) => {
        if (!response.ok)
          throw new Error('请求失败')
        return response.json()
      })
      .then(data => console.log('发送成功:', data))
      .catch(error => console.error('发送失败:', error))
  }
}
// 点击按钮
class TrackerClick extends Tracker {
  constructor() {
    super({
      event_type: 'click',
      event_name: '点击',
    })
  }

  trackElementClicks(elementIds) {
    if (!Array.isArray(elementIds)) {
      console.error('参数必须是一个数组（元素ID列表）')
      return
    }
    for (const element_id of elementIds) {
      const element = document.querySelector(element_id)
      if (!element) {
        console.warn(`未找到ID为 ${element_id} 的元素`)
        continue
      }
      // 绑定点击事件
      this.TRacerData.element_name = element.dataset.name || element.tagName.toLowerCase()
      this.TRacerData.burying_point_id = element.dataset.point_id
      element.addEventListener('click', () => {
        super.emit()
      })
    }
  }
}

// 访问页面
class TracerPage extends Tracker {
  #enterTime = JSON.parse(sessionStorage.getItem('enterTime')) || null
  // 进入页面类型, view:浏览, enter:刚进入
  #viewType = 'view'
  constructor() {
    super({
      event_type: 'view-in',
      event_name: '浏览-进',
    })
  }

  async trackPage(pageOption) {
    const { page, url, title } = pageOption
    // console.log(`共停留:${totalTime}秒`)
    const burying_point_id = page === 'index' ? 10007 : 10011
    this.TRacerData.burying_point_id = burying_point_id
    // 进入页面
    if (this.#viewType === 'enter') {
      this.TRacerData.page_url = window.location.href
      this.TRacerData.page_title = document.title
      this.TRacerData.event_name = '浏览-进'
      this.TRacerData.event_type = 'view-in'
      this.TRacerData.remark = null
    }
    // 浏览页面
    else {
      const totalTime = Math.abs((+new Date() - this.#enterTime) / 1000)
      this.TRacerData.page_url = url
      this.TRacerData.page_title = title
      this.TRacerData.event_name = '浏览-出'
      this.TRacerData.event_type = 'view-out'
      this.TRacerData.remark = totalTime
    }
    super.emit().finally(() => {
      this.#viewType = null
    })
  }

  // 是否符合页面路径
  matchCondition(path) {
    return path === 'index' || path === 'product'
  }

  async trackPageVisit(pagePath) {
    // 保存的上一页
    const prePage = JSON.parse(sessionStorage.getItem('prePage')) || {}
    console.log('🚀  prePage', prePage)
    console.log('🚀  pagePath', pagePath)

    // 进入首页和详情页
    if (this.matchCondition(pagePath)) {
      this.#viewType = 'enter'
      await this.trackPage({ page: pagePath })

      // 刷新页面
      if (pagePath === prePage.page) {
        return
      }

      // 首页和详情页之间跳转
      if (this.matchCondition(prePage.page)) {
        this.#viewType = 'view'
        await this.trackPage(prePage)
      }

      this.#enterTime = JSON.parse(sessionStorage.getItem('enterTime')) || this.#enterTime
      sessionStorage.setItem('enterTime', +new Date())
      sessionStorage.setItem('prePage', JSON.stringify({
        page: pagePath,
        title: document.title,
        url: window.location.href,
      }))
    }
    // 进入其他页面
    else {
      // 是从首页和详情页进入的其他页面,
      if (prePage) {
        this.#viewType = 'view'
        await this.trackPage(prePage)
        // 清空记录的页面信息
        sessionStorage.setItem('prePage', null)
        // 清空进入时间
        sessionStorage.setItem('enterTime', null)
        this.#enterTime = null
      }
    }
  }
}
