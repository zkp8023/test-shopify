<style>
  #shopify-section-{{ section.id }} {
    --section-padding-top: {{ section.settings.padding_top }}px;
    --section-padding-bottom: {{ section.settings.padding_bottom }}px;
    {%- render 'section-variables', section: section -%}
  }
</style>
    
<div class="section section--padding{% if section.settings.divider %} section--divider{% endif %}{% if section.settings.rounded %} section--rounded relative{% endif %}">
  
  <div class="page-width{% if section.settings.full_width %} page-width--full{% endif %} relative">
    {%- render 'section-heading', section: section -%}
    {%- if section.blocks.size > 0 -%}
      <tabs-element class="top-tabs tab-list flex gap-6 justify-between" style="margin-bottom:20px;" >
        <div class="scroll-area grid">
          <div class="flex gap-4" role="tablist">
            {%- for block in section.blocks -%}
              {%- assign collection = block.settings.collection -%}
              <button
                class="tab__item button{% if forloop.first %} button--primary{% else %} button--secondary{% endif %} whitespace-nowrap"
                {% if forloop.first %}
                  disabled
                {% endif %}
                type="button"
                is="hover-button"
                role="tab"
                aria-controls="TabPanel-{{ block.id }}"
                data-index="{{ forloop.index0 }}"
                data-block-id="{{ block.id }}"
                {{ block.shopify_attributes }}
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- liquid
                    if block.settings.title != blank or collection != blank
                      echo block.settings.title | default: collection.title | escape
                    else
                      echo 'onboarding.collection_title' | t | escape
                    endif
                  -%}
                </span>
              </button>
            {%- endfor -%}
          </div>
        </div>

        {%- if section.settings.carousel_on_desktop -%}
          {%- for block in section.blocks -%}
            <div
              class="indicators hidden lg:flex gap-2d5"
              {% unless forloop.first %}
                hidden
              {% endunless %}
              data-index="{{ forloop.index0 }}"
            >
              <button
                class="button button--secondary"
                type="button"
                is="previous-button"
                aria-controls="Slider-{{ block.id }}"
                aria-label="{{ 'general.pagination.previous' | t | escape }}"
                disabled
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- render 'icon', icon: 'chevron-left', class: 'transform' -%}
                </span>
              </button>
              <button
                class="button button--secondary"
                type="button"
                is="next-button"
                aria-controls="Slider-{{ block.id }}"
                aria-label="{{ 'general.pagination.next' | t | escape }}"
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- render 'icon', icon: 'chevron-right', class: 'transform' -%}
                </span>
              </button>
            </div>
          {%- endfor -%}
        {%- endif -%}
      </tabs-element>

      {%- for block in section.blocks -%}
        {%- liquid
          assign collection = block.settings.collection
          assign products = block.settings.products | default: collection.products
          assign custom_collection_title = block.settings.custom_collection_title
          assign custom_collection_title_size = block.settings.custom_collection_title_size
          assign custom_collection_title_color = block.settings.custom_collection_title_color
          assign custom_link_label = block.settings.custom_link_label
          assign custom_link = block.settings.custom_link
          assign custom_link_color = block.settings.custom_link_color
          assign custom_link_size = block.settings.custom_link_size
        -%}
        <div
          id="TabPanel-{{ block.id }}"
          role="tabpanel"
          data-linkage-section={{ block.settings.linkage_section_id }}
          {% unless forloop.first %}
            hidden
          {% endunless %}
        >
          <!-- TODO 添加系列标题, 添加系列链接 -->
          {% if custom_collection_title %}
            <h3 style="margin-bottom:20px; color:{{ custom_collection_title_color }};font-size:{{ custom_collection_title_size }}rem;">
              {{ custom_collection_title }}
            </h3>
          {% endif %}
          {% if custom_link_label != blank %}
            <a href="{{ custom_link }}" style="color:{{ custom_link_color }};font-size:{{ custom_link_size }}rem;">
              {{- custom_link_label -}}
            </a>
          {% endif %}
          <slider-element
            id="Slider-{{ block.id }}"
            class="grid slider{% if section.settings.carousel_on_desktop %} slider--desktop{% endif %}{% if section.settings.swipe_on_mobile %} slider--tablet{% endif %}"
            selector=".card-grid>.card"
          >
            <motion-list class="product-grid card-grid card-grid--{{ section.settings.columns }} mobile:card-grid--{{ section.settings.columns_mobile }} grid">
              {%- for product in products limit: section.settings.product_limit -%}
                {%- render 'product-card',
                  product: product,
                  product_id: product.id,
                  section_id: section.id,
                  lazy_load: false,
                  image_ratio: settings.product_image_ratio,
                  image_fill: settings.product_image_fill,
                  show_secondary_image: settings.product_secondary_image,
                  show_vendor: settings.product_vendor,
                  show_rating: settings.product_rating,
                  show_color_swatches: settings.product_color_swatches,
                  show_countdown: settings.product_countdown,
                  show_quick_add: settings.product_quick_add,
                  show_quick_view: settings.product_quick_view,
                  show_save_amount: settings.product_save_amount,
                  save_type: settings.product_save_type,
                  label: section.settings.button_text,
                  label_size: section.settings.button_text_size,
                  bg_color: section.settings.bg_color,
                  label_color: section.settings.text_color,
                  vertical_position: section.settings.vertical_position,
                  custom_vertical: section.settings.custom_vertical,
                  horizontal_position: section.settings.horizontal_position,
                  padding_vertical: section.settings.padding_vertical,
                  padding_horizontal: section.settings.padding_horizontal,
                  custom_horizontal: section.settings.custom_horizontal,
                  button_style: section.settings.button_style
                -%}
              {%- else -%}
                {%- for i in (1..section.settings.product_limit) -%}
                  {%- capture placeholder -%}product-{% cycle '1', '2', '3', '4', '5', '6' %}{%- endcapture -%}
                  {%- render 'product-card-placeholder',
                    lazy_load: false,
                    image_ratio: settings.product_image_ratio,
                    image_fill: settings.product_image_fill,
                    show_secondary_image: settings.product_secondary_image,
                    show_vendor: settings.product_vendor,
                    show_rating: settings.product_rating,
                    show_color_swatches: settings.product_color_swatches,
                    show_countdown: settings.product_countdown,
                    show_quick_add: settings.product_quick_add,
                    show_quick_view: settings.product_quick_view,
                    show_save_amount: settings.product_save_amount,
                    save_type: settings.product_save_type,
                    placeholder: placeholder
                  -%}
                {%- endfor -%}
              {%- endfor -%}
            </motion-list>
          </slider-element>

          {%- if section.settings.show_view_all
            and collection != blank
            and section.settings.product_limit < collection.all_products_count
          -%}
            <p class="text-center">
              <a
                class="button button--secondary icon-with-text"
                href="{{ collection.url }}"
                is="hover-link"
                aria-label="{{ 'sections.featured_collection.view_all_label' | t: collection_name: collection.title }}"
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- liquid
                    render 'icon', icon: 'newspaper'
                    echo 'sections.featured_collection.view_all' | t
                  -%}
                </span>
              </a>
            </p>
          {%- endif -%}
        </div>
      {%- endfor -%}
      <tabs-element class="bottom-tabs tab-list flex gap-6 justify-between">
        <div class="scroll-area grid">
          <div class="flex gap-4" role="tablist">
            {%- for block in section.blocks -%}
              {%- assign collection = block.settings.collection -%}
              <button
                class="tab__item button{% if forloop.first %} button--primary{% else %} button--secondary{% endif %} whitespace-nowrap"
                {% if forloop.first %}
                  disabled
                {% endif %}
                type="button"
                is="hover-button"
                aria-controls="TabPanel-{{ block.id }}"
                data-index="{{ forloop.index0 }}"
                data-block-id="{{ block.id }}"
                {{ block.shopify_attributes }}
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- liquid
                    if block.settings.title != blank or collection != blank
                      echo block.settings.title | default: collection.title | escape
                    else
                      echo 'onboarding.collection_title' | t | escape
                    endif
                  -%}
                </span>
              </button>
            {%- endfor -%}
          </div>
        </div>

        {%- if section.settings.carousel_on_desktop -%}
          {%- for block in section.blocks -%}
            <div
              class="indicators hidden lg:flex gap-2d5"
              {% unless forloop.first %}
                hidden
              {% endunless %}
              data-index="{{ forloop.index0 }}"
            >
              <button
                class="button button--secondary"
                type="button"
                is="previous-button"
                aria-controls="Slider-{{ block.id }}"
                aria-label="{{ 'general.pagination.previous' | t | escape }}"
                disabled
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- render 'icon', icon: 'chevron-left', class: 'transform' -%}
                </span>
              </button>
              <button
                class="button button--secondary"
                type="button"
                is="next-button"
                aria-controls="Slider-{{ block.id }}"
                aria-label="{{ 'general.pagination.next' | t | escape }}"
              >
                <span class="btn-fill" data-fill></span>
                <span class="btn-text">
                  {%- render 'icon', icon: 'chevron-right', class: 'transform' -%}
                </span>
              </button>
            </div>
          {%- endfor -%}
        {%- endif -%}
      </tabs-element>
    <script>
       const linkageSections = {
                {%- for block in section.blocks -%}
                  "{{ block.id }}": "{{ block.settings.linkage_section_id | escape }}"{% unless forloop.last %},{% endunless %}
                {%- endfor -%}
              };
        const loadedSectionMap=new Map()
        let firstSection = false
        document.addEventListener('DOMContentLoaded', function() {
          const demoSections = Object.entries(linkageSections).forEach(([k,v],i)=>{
            const section = document.querySelector(`#shopify-section-${v}`);
            // 隐藏所有section
            if(section){
              loadedSectionMap.set(k, section)
              // section.style.display='none'
            }
          })
          // 获取上下两套按钮容器
          const topTabs = document.querySelector('.top-tabs');
          const bottomTabs = document.querySelector('.bottom-tabs');
          if (!topTabs || !bottomTabs) return;

          // 获取所有按钮元素
          const topButtons = topTabs.querySelectorAll('.tab__item');
          const bottomButtons = bottomTabs.querySelectorAll('.tab__item');
          
          // 改变获取到的section的显示状态
          function updateSectionVisibility(blockId){
            loadedSectionMap.size && loadedSectionMap.forEach((value,key)=>{
              console.log('value',value)
              console.log('key',key)
              if(key === blockId){
                value.style.height='auto'
                // value.style.display='flow-root'
              }else{
                value.style.height=0
                // value.style.display='none'
              }
            })
          };
          // 默认显示第一个section
          const first = loadedSectionMap.keys().next().value
          console.log(123,loadedSectionMap)
          console.log(first,999)
          bottomButtons[0].click()
          // topTabs.selectedIndex= 0
          updateSectionVisibility(loadedSectionMap.keys().next().value)
          
          // 同步按钮状态的函数
          function syncButtons(clickedButton, buttonsToUpdate) {
            const index = clickedButton.dataset.index;
            const blockId = clickedButton.dataset.blockId
            updateSectionVisibility(blockId)
            buttonsToUpdate.forEach(button => {
              // 移除所有按钮的选中状态
              button.classList.remove('button--primary');
              button.classList.add('button--secondary');
              button.disabled = false;

              // 为对应索引的按钮添加选中状态
              if (button.dataset.index === index) {
                button.classList.remove('button--secondary');
                button.classList.add('button--primary');
                button.disabled = true;
              }
            });
          }

          // 添加上面按钮的点击事件
          topButtons.forEach(button => {
            button.addEventListener('click', function(e) {
              syncButtons(this, bottomButtons);
              // bottomTabs.selectedIndex= this.dataset.index;
            },false);
          });

          // 添加下面按钮的点击事件
          bottomButtons.forEach(button => {
            button.addEventListener('click', function(e) {
              syncButtons(this, bottomButtons);
              topTabs.selectedIndex= this.dataset.index;
            },false);
          });
        });
      </script>
    <!-- <script>
  // 1. Build mapping of block IDs to linked section IDs
  const sectionLinkageMap = {
    {% for block in section.blocks %}
      "{{ block.id }}": "{{ block.settings.linkage_section_id | escape }}"{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };

  // 2. Store loaded sections to avoid repeated queries
  const loadedSections = {};

  document.addEventListener('DOMContentLoaded', () => {
    // 3. Get tab containers
    const topTabs = document.querySelector('.top-tabs');
    const bottomTabs = document.querySelector('.bottom-tabs');
    if (!topTabs || !bottomTabs) return;

    // 4. Function to handle tab changes
    const handleTabChange = (clickedButton, isFromTop) => {
      const blockId = clickedButton.getAttribute('aria-controls')?.replace('TabPanel-', '');
      console.log(clickedButton.dataset.blockId,99990900000000)
      // 5. Show/hide linked sections
      const sectionId = sectionLinkageMap[blockId];
      if (sectionId) {
        // Lazy load section element if not already loaded
        if (!loadedSections[sectionId]) {
          loadedSections[sectionId] = document.querySelector(`#shopify-section-${sectionId}`);
        }
        
        // Hide all linked sections
        Object.values(loadedSections).forEach(section => {
          if (section) section.style.display = 'none';
        });
        
        // Show current linked section
        if (loadedSections[sectionId]) {
          loadedSections[sectionId].style.display = 'flow-root';
        }
      }

      // 6. Update button states for both tab sets
      const allButtons = {
        top: topTabs.querySelectorAll('.tab__item'),
        bottom: bottomTabs.querySelectorAll('.tab__item')
      };

      // Determine which set was clicked and which needs updating
      const sourceSet = isFromTop ? 'top' : 'bottom';
      const targetSet = isFromTop ? 'bottom' : 'top';
      const clickedIndex = clickedButton.dataset.index;

      // Update both sets to maintain consistency
      [sourceSet, targetSet].forEach(set => {
        allButtons[set].forEach(button => {
          const isActive = button.dataset.index === clickedIndex;
          button.classList.toggle('button--primary', isActive);
          button.classList.toggle('button--secondary', !isActive);
          button.disabled = isActive;
        });
      });
    };

    // 7. Bind events to top tabs
    topTabs.querySelectorAll('.tab__item').forEach(btn => {
      btn.addEventListener('click', () => handleTabChange(btn, true));
    });
    
    // 8. Bind events to bottom tabs
    bottomTabs.querySelectorAll('.tab__item').forEach(btn => {
      btn.addEventListener('click', () => handleTabChange(btn, false));
    });

    // 9. Initialize first tab as active
    const firstBlockId = "{{ section.blocks.first.id }}";
    const defaultSectionId = sectionLinkageMap[firstBlockId];
    if (defaultSectionId) {
      loadedSections[defaultSectionId] = document.querySelector(`#shopify-section-${defaultSectionId}`);
      if (loadedSections[defaultSectionId]) {
        loadedSections[defaultSectionId].style.display = 'flow-root';
      }
      
      // Set first buttons as active in both tab sets
      [topTabs, bottomTabs].forEach(tabSet => {
        const firstBtn = tabSet.querySelector('.tab__item[data-index="0"]');
        if (firstBtn) {
          firstBtn.classList.add('button--primary');
          firstBtn.classList.remove('button--secondary');
          firstBtn.disabled = true;
        }
      });
    }
  });
</script> -->
    {%- endif -%}
  </div>
</div>

{% schema %}
{
  "name": "t:sections.featured-collections.name",
  "class": "featured-collections",
  "max_blocks": 6,
  "settings": [
    {
      "type": "range",
      "id": "product_limit",
      "label": "t:sections.global.settings.product_limit.label",
      "default": 6,
      "min": 2,
      "max": 12,
      "step": 1
    },
    {
      "type": "range",
      "id": "columns",
      "min": 1,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "t:sections.global.settings.columns.label"
    },
    {
      "type": "checkbox",
      "id": "carousel_on_desktop",
      "label": "t:sections.global.settings.carousel_on_desktop.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_view_all",
      "label": "t:sections.featured-collection.settings.show_view_all.label",
      "info": "t:sections.featured-collection.settings.show_view_all.info",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "t:sections.global.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.global.settings.columns_mobile.options__2.label"
        }
      ],
      "default": "1",
      "label": "t:sections.global.settings.columns_mobile.label"
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "label": "t:sections.global.settings.swipe_on_mobile.label",
      "default": true
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__heading.content"
    },
    {
      "type": "inline_richtext",
      "id": "heading",
      "label": "t:sections.global.settings.heading.label",
      "default": "Featured collection"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "title-sm",
          "label": "t:sections.global.settings.heading_size.options__1.label"
        },
        {
          "value": "title-md",
          "label": "t:sections.global.settings.heading_size.options__2.label"
        },
        {
          "value": "title-lg tracking-heading",
          "label": "t:sections.global.settings.heading_size.options__3.label"
        },
        {
          "value": "title-xl tracking-heading",
          "label": "t:sections.global.settings.heading_size.options__4.label"
        }
      ],
      "default": "title-md",
      "label": "t:sections.global.settings.heading_size.label"
    },
    {
      "type": "select",
      "id": "heading_alignment",
      "label": "t:sections.global.settings.heading_alignment.label",
      "options": [
        {
          "value": "text-left md:items-end md:flex-row",
          "label": "t:sections.global.settings.heading_alignment.options__1.label"
        },
        {
          "value": "text-center md:items-center",
          "label": "t:sections.global.settings.heading_alignment.options__2.label"
        },
        {
          "value": "text-right md:items-end md:flex-row-reverse",
          "label": "t:sections.global.settings.heading_alignment.options__3.label"
        }
      ],
      "default": "text-left md:items-end md:flex-row"
    },
    {
      "type": "select",
      "id": "heading_tag",
      "options": [
        {
          "value": "h1",
          "label": "t:sections.global.settings.heading_tag.options__1.label"
        },
        {
          "value": "h2",
          "label": "t:sections.global.settings.heading_tag.options__2.label"
        },
        {
          "value": "h3",
          "label": "t:sections.global.settings.heading_tag.options__3.label"
        },
        {
          "value": "h4",
          "label": "t:sections.global.settings.heading_tag.options__4.label"
        },
        {
          "value": "h5",
          "label": "t:sections.global.settings.heading_tag.options__5.label"
        },
        {
          "value": "h6",
          "label": "t:sections.global.settings.heading_tag.options__6.label"
        },
        {
          "value": "div",
          "label": "t:sections.global.settings.heading_tag.options__7.label"
        },
        {
          "value": "span",
          "label": "t:sections.global.settings.heading_tag.options__8.label"
        },
        {
          "value": "p",
          "label": "t:sections.global.settings.heading_tag.options__9.label"
        }
      ],
      "default": "h2",
      "label": "t:sections.global.settings.heading_tag.label",
      "info": "t:sections.global.settings.heading_tag.info"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "t:sections.global.settings.subheading.label"
    },
    {
      "type": "richtext",
      "id": "description",
      "label": "t:sections.global.settings.description.label"
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__highlight.content",
      "info": "t:sections.global.settings.header__highlight.info"
    },
    {
      "type": "select",
      "id": "highlighted_text",
      "options": [
        {
          "value": "none",
          "label": "t:sections.global.settings.highlighted_text.options__1.label"
        },
        {
          "value": "text",
          "label": "t:sections.global.settings.highlighted_text.options__2.label"
        },
        {
          "value": "full_text",
          "label": "t:sections.global.settings.highlighted_text.options__3.label"
        },
        {
          "value": "half_text",
          "label": "t:sections.global.settings.highlighted_text.options__4.label"
        },
        {
          "value": "underline",
          "label": "t:sections.global.settings.highlighted_text.options__5.label"
        },
        {
          "value": "stencil",
          "label": "t:sections.global.settings.highlighted_text.options__6.label"
        },
        {
          "value": "scribble",
          "label": "t:sections.global.settings.highlighted_text.options__7.label"
        }
      ],
      "default": "none",
      "label": "t:sections.global.settings.highlighted_text.label"
    },
    {
      "type": "select",
      "id": "highlighted_scribble",
      "options": [
        {
          "value": "circle",
          "label": "t:sections.global.settings.highlighted_scribble.options__1.label"
        },
        {
          "value": "basic-underline",
          "label": "t:sections.global.settings.highlighted_scribble.options__2.label"
        },
        {
          "value": "sketch-underline",
          "label": "t:sections.global.settings.highlighted_scribble.options__3.label"
        },
        {
          "value": "squiggle-underline",
          "label": "t:sections.global.settings.highlighted_scribble.options__4.label"
        },
        {
          "value": "squiggle-underline-2",
          "label": "t:sections.global.settings.highlighted_scribble.options__5.label"
        }
      ],
      "default": "circle",
      "label": "t:sections.global.settings.highlighted_scribble.label",
      "info": "t:sections.global.settings.highlighted_scribble.info"
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__colors.content",
      "info": "t:sections.global.settings.header__colors.info"
    },
    {
      "type": "color",
      "id": "color_text",
      "label": "t:sections.global.settings.color_text.label"
    },
    {
      "type": "color",
      "id": "color_background",
      "label": "t:sections.global.settings.color_background.label"
    },
    {
      "type": "color_background",
      "id": "gradient_background",
      "label": "t:sections.global.settings.gradient_background.label"
    },
    {
      "type": "color",
      "id": "color_highlight",
      "label": "t:sections.global.settings.color_highlight.label"
    },
    {
      "type": "color_background",
      "id": "gradient_highlight",
      "label": "t:sections.global.settings.gradient_highlight.label"
    },
    {
      "type": "color",
      "id": "color_button_text",
      "label": "t:sections.global.settings.color_button_text.label"
    },
    {
      "type": "color",
      "id": "color_button_background",
      "label": "t:sections.global.settings.color_button_background.label"
    },
    {
      "type": "color_background",
      "id": "color_button_gradient",
      "label": "t:sections.global.settings.color_button_gradient.label"
    },
    {
      "type": "header",
      "content": "t:sections.global.settings.header__section.content"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "t:sections.global.settings.padding_top.label",
      "default": 72
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "t:sections.global.settings.padding_bottom.label",
      "default": 72
    },
    {
      "type": "checkbox",
      "id": "divider",
      "label": "t:sections.global.settings.divider.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.global.settings.full_width.label",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "rounded",
      "default": false,
      "label": "t:sections.global.settings.rounded.label"
    },
       {
      "type": "header",
      "content": "可点击按钮"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "按钮文本",
    },
    {
        "type": "select",
        "id": "button_style",
        "options": [
          {
            "value": "primary",
            "label": "t:sections.global.settings.button_style.options__1.label"
          },
          {
            "value": "secondary",
            "label": "t:sections.global.settings.button_style.options__2.label"
          },
          {
            "value": "link",
            "label": "t:sections.global.settings.button_style.options__3.label"
          }
        ],
        "default": "primary",
        "label": "按钮类型"
      },
    {
      "type": "range",
      "id": "button_text_size",
      "label": "字体大小",
      "default": 1,
      "min": 0.1,
      "max": 10,
      "step": 0.1,
      "unit": "rem"
    },
    {
      "type": "color_background",
      "id": "bg_color",
      "label": "背景颜色",
      "default": "#FF0000"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "文本颜色",
      "default": "#FFFFFF"
    },
    {
      "type": "header",
      "content": "定位设置"
    },
    {
      "type": "select",
      "id": "vertical_position",
      "label": "垂直方向",
      "options": [
        {
          "value": "top",
          "label": "顶部"
        },
        {
          "value": "center",
          "label": "居中"
        },
        {
          "value": "bottom",
          "label": "底部"
        },
        {
          "value": "custom",
          "label": "自定义"
        }
      ],
      "default": "bottom"
    },
    {
      "type": "range",
      "id": "custom_vertical",
      "label": "垂直位置 (%)",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "default": 90,
      "info": "相对于父容器高度的百分比"
    },
    {
      "type": "select",
      "id": "horizontal_position",
      "label": "水平方向",
      "options": [
        {
          "value": "left",
          "label": "左侧"
        },
        {
          "value": "center",
          "label": "居中"
        },
        {
          "value": "right",
          "label": "右侧"
        },
        {
          "value": "custom",
          "label": "自定义"
        }
      ],
      "default": "right"
    },
    {
      "type": "range",
      "id": "custom_horizontal",
      "label": "水平位置 (%)",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "default": 95,
      "info": "相对于父容器宽度的百分比"
    },
    {
      "type": "header",
      "content": "尺寸设置"
    },
    {
      "type": "range",
      "id": "padding_vertical",
      "label": "上下内边距 (px)",
      "min": 0,
      "max": 30,
      "step": 1,
      "unit": "px",
      "default": 10
    },
    {
      "type": "range",
      "id": "padding_horizontal",
      "label": "左右内边距 (px)",
      "min": 0,
      "max": 50,
      "step": 1,
      "unit": "px",
      "default": 20
    }
  ],
  "blocks": [
    {
      "type": "collection",
      "name": "t:sections.global.blocks.collection.name",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "t:sections.global.settings.collection.label"
        },
        {
          "type": "product_list",
          "id": "products",
          "label": "t:sections.global.settings.products.label",
          "info": "t:sections.global.settings.products.info"
        },
        {
          "type": "header",
          "content": "Title"
        },
        {
          "type": "text",
          "id": "title",
          "label": "t:sections.global.settings.title.label" 
        },
        {
          "type": "text",
          "id": "custom_collection_title",
          "label": "Custom Collection Title",
        },
        {
          "type": "range",
          "id": "custom_collection_title_size",
          "min": 0.1,
          "max": 10,
          "step": 0.1,
          "default":1.2,
          "label": "Title Size",
        },
        {
          "type": "color",
          "id": "custom_collection_title_color",
          "label": "TiTle Color"
        },
        {
          "type": "header",
          "content": "Link"
        },
        {
          "type": "text",
          "id": "custom_link_label",
          "label": "Custom Link Lable",
        },
          {
          "type": "color",
          "id": "custom_link_color",
          "label": "Link Color"
        },
         {
          "type": "range",
          "id": "custom_link_size",
          "min": 0.1,
          "max": 10,
          "step": 0.1,
          "default":1.2,
          "label": "Link Size",
        },
        {
          "type": "url",
          "id": "custom_link",
          "label": "Custom Title Link",
        },
        {
          "type": "header",
          "content": "Linkage Section"
        },
        {
          "type": "text",
          "id": "linkage_section_id",
          "label": "Linkage Section Id"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.featured-collections.presets.name",
      "blocks": [
        {
          "type": "collection"
        },
        {
          "type": "collection"
        }
      ]
    }
  ],
  "disabled_on": {
    "templates": [
      "password"
    ]
  }
}
{% endschema %}
